package com.example.extractor;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.stream.Collectors;

import com.google.api.services.docs.v1.model.Document;
import com.google.api.services.docs.v1.model.EmbeddedObject;
import com.google.api.services.docs.v1.model.InlineObject;
import com.google.api.services.docs.v1.model.InlineObjectElement;
import com.google.api.services.docs.v1.model.Paragraph;
import com.google.api.services.docs.v1.model.ParagraphElement;
import com.google.api.services.docs.v1.model.Size;
import com.google.api.services.docs.v1.model.StructuralElement;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;

public class GoogleDocExtractor {

    private AtomicInteger imageCounter;
    private String articleTopic = "default";
    private String docId = "";

    public String extractContentAsJson(Document document) {
        if (document.getBody() == null || document.getBody().getContent() == null) return "{}";

        this.imageCounter = new AtomicInteger(1);
        this.docId = document.getDocumentId();
        this.articleTopic = cleanTitle(document.getTitle());

        JsonObject root = new JsonObject();
        root.addProperty("article_title", document.getTitle().replace(" - Completed", "").trim());
        root.addProperty("article_info", "");

        List<StructuralElement> elements = document.getBody().getContent();
        Map<String, InlineObject> inlineObjects = document.getInlineObjects();
        
        findAndSetArticleImage(elements, inlineObjects, root);
        this.imageCounter.set(1);

        JsonArray sectionsArray = new JsonArray();
        JsonObject currentSection = null;
        List<JsonObject> contentForCurrentSection = new ArrayList<>();

        for (StructuralElement element : elements) {
            Paragraph p = element.getParagraph();
            if (p != null && isHeading(p)) {
                if (currentSection != null) {
                    finalizeAndAddSection(sectionsArray, currentSection, contentForCurrentSection);
                }
                
                String title = cleanText(extractText(p));
                if (title.isEmpty()) {
                    currentSection = null;
                    continue;
                }
                
                currentSection = createNewSection(p);
                contentForCurrentSection = new ArrayList<>();

            } else if (currentSection != null) {
                // This is the main content processing logic
                if (element.getParagraph() != null) {
                    processParagraphContent(element.getParagraph(), contentForCurrentSection, inlineObjects);
                }
                // We will add back table/list logic in the next step
            }
        }

        if (currentSection != null) {
            finalizeAndAddSection(sectionsArray, currentSection, contentForCurrentSection);
        }

        root.add("sections", sectionsArray);
        Gson gson = new GsonBuilder().setPrettyPrinting().create();
        return gson.toJson(root);
    }
    
    // *** DEFINITIVE, REWRITTEN LOGIC FOR PARAGRAPH/IMAGE BLOCKS ***
    private void processParagraphContent(Paragraph paragraph, List<JsonObject> contents, Map<String, InlineObject> inlineObjects) {
        // This method processes one paragraph at a time and adds zero, one, or more blocks to the contents list.
        StringBuilder textBuilder = new StringBuilder();
        if (paragraph.getElements() == null) return;

        for (ParagraphElement pEl : paragraph.getElements()) {
            if (pEl.getTextRun() != null) {
                textBuilder.append(pEl.getTextRun().getContent());
            } else if (pEl.getInlineObjectElement() != null) {
                // An image is found. First, flush any preceding text as its own block.
                String precedingText = cleanText(textBuilder.toString());
                if (!precedingText.isEmpty()) {
                    contents.add(createParagraphObject(precedingText));
                }
                textBuilder.setLength(0); // Reset buffer

                // Then, add the image as its own, separate block.
                contents.add(createImageObject(pEl.getInlineObjectElement(), inlineObjects));
            }
        }

        // After the loop, flush any remaining text from the paragraph as its own block.
        String remainingText = cleanText(textBuilder.toString());
        if (!remainingText.isEmpty()) {
            contents.add(createParagraphObject(remainingText));
        }
    }

    private void finalizeAndAddSection(JsonArray sectionsArray, JsonObject section, List<JsonObject> contents) {
        if (section == null) return;
        
        if (contents.size() == 1) {
            JsonObject singleContent = contents.get(0);
            String contentType = singleContent.get("content_type").getAsString();
            section.addProperty("content_type", contentType);
            if (singleContent.has("text")) section.add("text", singleContent.get("text"));
            // Add other types (list, table) here in later steps
        } else if (contents.size() > 1) {
            section.addProperty("content_type", "group");
            JsonArray contentArray = new JsonArray();
            contents.forEach(contentArray::add);
            section.add("content", contentArray);
        }
        
        addSection(sectionsArray, section);
    }

    private JsonObject createNewSection(Paragraph p) {
        String title = cleanText(extractText(p));
        if (title.isEmpty()) return null;
        
        JsonObject newSection = new JsonObject();
        newSection.addProperty("title", title + "\n");
        newSection.addProperty("style", getHeadingStyle(p));
        return newSection;
    }

    // --- All other utility methods remain the same ---

    private void addSection(JsonArray sectionsArray, JsonObject section) {
        if (section == null) return;
        JsonObject sectionContainer = new JsonObject();
        sectionContainer.add("section", section);
        sectionsArray.add(sectionContainer);
    }
    
    private JsonObject createParagraphObject(String text) {
        JsonObject pObject = new JsonObject();
        pObject.addProperty("content_type", "paragraph");
        pObject.addProperty("text", text + "\n");
        return pObject;
    }

    private JsonObject createImageObject(InlineObjectElement inlineElement, Map<String, InlineObject> inlineObjects) {
        JsonObject imageObject = new JsonObject();
        imageObject.addProperty("content_type", "image");
        String objectId = inlineElement.getInlineObjectId();
        imageObject.addProperty("url", buildImageUrl(objectId));
        if (inlineObjects != null) {
            InlineObject inlineObject = inlineObjects.get(objectId);
            if (inlineObject != null && inlineObject.getInlineObjectProperties() != null) {
                EmbeddedObject embeddedObject = inlineObject.getInlineObjectProperties().getEmbeddedObject();
                if (embeddedObject != null) {
                     if (embeddedObject.getSize() != null) {
                        Size size = embeddedObject.getSize();
                        if (size.getWidth() != null) imageObject.addProperty("width", size.getWidth().getMagnitude());
                        if (size.getHeight() != null) imageObject.addProperty("height", size.getHeight().getMagnitude());
                    }
                    String title = embeddedObject.getTitle();
                    if(title != null && !title.isEmpty()) {
                        imageObject.addProperty("title", title);
                    }
                }
            }
        }
        return imageObject;
    }
    
    private void findAndSetArticleImage(List<StructuralElement> elements, Map<String, InlineObject> inlineObjects, JsonObject root) {
        if (elements == null) return;
        for (StructuralElement element : elements) {
            if (element.getParagraph() != null && element.getParagraph().getElements() != null) {
                for (ParagraphElement pEl : element.getParagraph().getElements()) {
                    if (pEl.getInlineObjectElement() != null) {
                        String url = buildImageUrl(pEl.getInlineObjectElement().getInlineObjectId());
                        root.addProperty("article_image", url);
                        return;
                    }
                }
            }
        }
    }
    
    private String buildImageUrl(String objectId) {
        return String.format("/api/images/%s/%s/image_%03d.jpg", this.articleTopic, this.docId, imageCounter.getAndIncrement());
    }

    private String cleanTitle(String title) {
        if (title == null) return "default";
        return title.replace(" - Completed", "").trim().toLowerCase().replaceAll("\\s+", "");
    }

    private String cleanText(String text) {
        if (text == null) return "";
        return text.replaceAll("\\u000B", "\n").trim();
    }

    private boolean isHeading(Paragraph p) {
        return p.getParagraphStyle() != null &&
               p.getParagraphStyle().getNamedStyleType() != null &&
               p.getParagraphStyle().getNamedStyleType().startsWith("HEADING");
    }

    private String getHeadingStyle(Paragraph p) {
        return p.getParagraphStyle().getNamedStyleType();
    }
    
    private String extractText(Paragraph paragraph) {
        if (paragraph == null || paragraph.getElements() == null) return "";
        return paragraph.getElements().stream()
                .filter(el -> el.getTextRun() != null && el.getTextRun().getContent() != null)
                .map(el -> el.getTextRun().getContent())
                .collect(Collectors.joining());
    }
}